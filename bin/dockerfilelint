#!/usr/bin/env node

var process = require('process');
var fs = require('fs');
var os = require("os");
var path = require('path');
var argv = require('yargs')
            .alias('o', 'output')
            .describe('output', 'the format in which you want to display the lint results (default is cli)')
            .help()
            .argv;
var dockerfilelint = require('../lib/index');
var chalk = require('chalk');

var CliReporter = require('../lib/reporter/cli_reporter');
var JsonReporter = require('../lib/reporter/json_reporter');
var reporter;

var fileContent, configFilePath;
if (argv._.length === 0 || argv._[0] === '-') {
  // read content from stdin
  fileContent = '';
  configFilePath = '.';

  console.log(argv._.toString());
  process.stdin.resume();
  process.stdin.setEncoding('utf8');
  process.stdin.on('data', function (chunk) {
    fileContent += chunk;
  });
  return process.stdin.on('end', function () {
    if (fileContent.length === 0) {
      console.error('Usage: dockerfilelint <filename or dockerfile contents>');
      return process.exit(1);
    }
    processContent(configFilePath, '<stdin>', fileContent);
    report();
  });
}

setReporter();

argv._.forEach((fileName) => {
  try {
    var stats = fs.lstatSync(fileName);
    if (stats.isFile()) {
      fileContent = fs.readFileSync(fileName, 'UTF-8');
      var root = (os.platform == "win32") ? process.cwd().split(path.sep)[0] : "/";
      configFilePath = path.resolve(path.dirname(fileName));
    }
  } catch (e) {
    if (e.code === 'ENOENT') {
      fileContent = fileName;
      fileName = '<contents>';
      configFilePath = './';
    }
  }

  if (!fileContent) {
    console.error(chalk.red('Invalid input:'), fileName);
    return process.exit(1);
  }

  processContent(configFilePath, fileName, fileContent);
});

report();

function setReporter() {
  switch(argv.output) {
    case 'json':
      reporter = new JsonReporter();
      break;
    case 'cli':
    default:
      reporter = new CliReporter();
  }
}

function processContent (configFilePath, name, content) {
  reporter.addFile(name, content, dockerfilelint.run(configFilePath, content));
}

function report () {
  var report = reporter.buildReport();
  console.log(report.toString());
  process.exit(report.totalIssues);
}
